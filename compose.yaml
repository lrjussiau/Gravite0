

services:
  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_ENV:-production} 
    image: next-app
    ports:
      - 3000:3000
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NODE_ENV: ${NODE_ENV:-production}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - app-network
    command: >
      sh -c "if [ \"$NODE_ENV\" = \"production\" ];
             then npx prisma migrate deploy && node prisma/seed.js && npm start;
             else npx prisma migrate deploy && node prisma/seed.js && npm run dev;
             fi"

volumes:
  db_data:

networks:
  app-network:
    driver: bridge
